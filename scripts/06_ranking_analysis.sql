/*
===============================================================================
Ranking Analysis
===============================================================================
Purpose:
    - To rank items (e.g., products, customers) based on performance or other metrics.
    - To identify top performers or laggards.

SQL Functions Used:
    - Window Ranking Functions: RANK(), DENSE_RANK(), ROW_NUMBER(), TOP
    - Clauses: GROUP BY, ORDER BY
===============================================================================
*/

-- ====================================================================== 
-- 6) Ranking (Top N - Bottom N)
-- ======================================================================

-- Which 5 products generate the highest revenue?
SELECT
	p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM datawarehouseanalytics.fact_sales AS f
LEFT JOIN datawarehouseanalytics.dim_products AS p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;

SELECT *
FROM (
	SELECT
		p.product_name,
		SUM(f.sales_amount) AS total_revenue,
		ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) AS rank_products
	FROM datawarehouseanalytics.fact_sales AS f
	LEFT JOIN datawarehouseanalytics.dim_products AS p
	ON p.product_key = f.product_key
	GROUP BY p.product_name) AS t
WHERE rank_products <= 5;

-- What are the 5 worst-perfrming products in terms of sales?

SELECT
	p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM datawarehouseanalytics.fact_sales AS f
LEFT JOIN datawarehouseanalytics.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC
LIMIT 5;

-- Find the top 10 customers who have generated the highest revenue
SELECT 
	p.category,
    SUM(f.sales_amount) AS total_revenue
FROM datawarehouseanalytics.fact_sales AS f
LEFT JOIN datawarehouseanalytics.dim_products p
ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- Find total revenue is generated by each customer
SELECT
	c.customer_key,
    c.first_name,
    c.last_name,
	COUNT(DISTINCT order_number) AS total_orders
FROM datawarehouseanalytics.fact_sales AS f
LEFT JOIN datawarehouseanalytics.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders ASC
LIMIT 3;

-- The 3 customers with the fewest orders placed

SELECT
	c.customer_key,
    c.first_name,
    c.last_name,
	COUNT(DISTINCT order_number) AS total_orders
FROM datawarehouseanalytics.fact_sales AS f
LEFT JOIN datawarehouseanalytics.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders ASC
LIMIT 3;
